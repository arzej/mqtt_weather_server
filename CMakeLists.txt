CMAKE_MINIMUM_REQUIRED (VERSION 2.6)
PROJECT (mqttws)

# The version number.
SET (mqttws_VERSION_MAJOR 1)
SET (mqttws_VERSION_MINOR 0)

## Build crash repoter on release build as default
IF (NOT (${CMAKE_BUILD_TYPE} MATCHES Release))
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF()

OPTION(BUILD_ENABLE_WARNINGS "Enable compiler warnings." ON)

MESSAGE("Build type: ${CMAKE_BUILD_TYPE}")

# enable c++11 (required for all platforms)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++0x")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")

## build in PIC mode
IF (NOT WIN32)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
ENDIF()

SET(CMAKE_MODULE_PATH "cmake_modules")

FIND_PACKAGE(PkgConfig)
FIND_PACKAGE(Mosquitto REQUIRED)
FIND_PACKAGE(Mosquittopp REQUIRED)
FIND_PACKAGE(Sqlite REQUIRED)
FIND_PACKAGE(LibSoup REQUIRED)
FIND_PACKAGE(GLIB REQUIRED)
FIND_PACKAGE(Threads REQUIRED)

INCLUDE_DIRECTORIES(mqttws ${SOURCES})
#Bring the headers, such as Student.h into the project
INCLUDE_DIRECTORIES(include)
FILE(GLOB SOURCES "src/*.cpp")
ADD_EXECUTABLE(mqttws ${SOURCES})

if(MOSQUITTOPP_INCLUDE_DIR AND MOSQUITTOPP_LIBRARY AND MOSQUITTO_LIBRARY)
    MESSAGE("MQTT: ${MOSQUITTOPP_INCLUDE_DIR} ${MOSQUITTOPP_LIBRARY}")
    INCLUDE_DIRECTORIES(${MOSQUITTOPP_INCLUDE_DIR})
    TARGET_LINK_LIBRARIES(mqttws ${MOSQUITTOPP_LIBRARY})
    SET(HAVE_MOSQUITOPP TRUE)
else()
  if(NOT MOSQUITTOPP_INCLUDE_DIR)
    MESSAGE(SEND_ERROR "Failed to find mosquittopp.h")
  endif()
  if(NOT MOSQUITTOPP_LIBRARY)
    MESSAGE(SEND_ERROR "Failed to find the libmosquittopp library")
  endif()
endif()

if(SQLITE3_INCLUDE_DIR AND SQLITE3_LIBRARIES)
    MESSAGE("Sqlite: ${SQLITE3_INCLUDE_DIR} ${SQLITE3_LIBRARIES}")
    INCLUDE_DIRECTORIES(${SQLITE3_INCLUDE_DIR})
    TARGET_LINK_LIBRARIES(mqttws ${SQLITE3_LIBRARIES})
    SET(HAVE_SQLITE3 TRUE)
else()
    if(NOT SQLITE3_INCLUDE_DIR)
        MESSAGE(SEND_ERROR "Failed to find sqlite3.h")
    endif()
    if(NOT SQLITE3_LIBRARIES)
        MESSAGE(SEND_ERROR "Failed to find the sqlite3 library")
    endif()
endif()

if(LIBSOUP_INCLUDE_DIRS AND LIBSOUP_LIBRARIES)
    MESSAGE("Libsoup: ${LIBSOUP_INCLUDE_DIRS} ${LIBSOUP_LIBRARIES}")
    INCLUDE_DIRECTORIES(${LIBSOUP_INCLUDE_DIRS})
    TARGET_LINK_LIBRARIES(mqttws ${LIBSOUP_LIBRARIES})
    SET(HAVE_SQLITE3 TRUE)
else()
    if(NOT LIBSOUP_INCLUDE_DIRS)
        MESSAGE(SEND_ERROR "Failed to find libsoup.h")
    endif()
    if(NOT LIBSOUP_LIBRARIES)
        MESSAGE(SEND_ERROR "Failed to find the libsoup library")
    endif()
endif()

if(GLIB_INCLUDES AND GLIB_LIBRARIES)
    MESSAGE("glib: ${GLIB_INCLUDES} ${GLIB_LIBRARIES}")
    INCLUDE_DIRECTORIES(${GLIB_INCLUDES})
    TARGET_LINK_LIBRARIES(mqttws ${GLIB_LIBRARIES})
    SET(HAVE_SQLITE3 TRUE)
else()
    if(NOT GLIB_INCLUDES)
        MESSAGE(SEND_ERROR "Failed to find glib.h")
    endif()
    if(NOT GLIB_LIBRARIES)
        MESSAGE(SEND_ERROR "Failed to find the glib library")
    endif()
endif()

TARGET_LINK_LIBRARIES(mqttws ${CMAKE_THREAD_LIBS_INIT})

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR})

INSTALL (TARGETS mqttws DESTINATION bin)

